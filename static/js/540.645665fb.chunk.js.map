{"version":3,"file":"static/js/540.645665fb.chunk.js","mappings":"wLACA,G,QAA0B,0BAA1B,EAAmE,+BAAnE,EAA6G,0BAA7G,EAAwJ,gCAAxJ,EAA8L,qB,UCA9L,EAAyB,2BAAzB,EAA6D,2B,SCmB7D,EAXwC,SAACA,GACvC,OACE,SAAC,KAAO,CACNC,GAAE,mBAAcD,EAAME,IACtBC,UAAWC,EAAiB,IAAMA,EAAe,SAEhDJ,EAAMK,MAGb,ECjBA,EAA0B,yBCU1B,EAJqC,SAACL,GACpC,OAAO,gBAAKG,UAAWC,EAAgB,SAAEJ,EAAMM,SACjD,E,oBCkBA,IAAMC,EAAiB,SAACP,GAKtB,OACE,SAAC,KAAM,CACLQ,cAAe,CACbC,eAAgB,IAElBC,SAAU,SAACC,EAAO,GAAoB,IAAjBC,EAAS,EAATA,WATL,SAACD,GACnBX,EAAMa,YAAYF,EACpB,CAQMG,CAAcH,EAAOF,gBACrBG,EAAU,CAAED,OAAQ,IACtB,EACAI,iBAAkBC,EAAAA,EAAmB,SAEpC,gBAAGC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAAO,OACjB,UAAC,KAAI,YACH,4BACE,SAAC,KAAK,CACJb,KAAM,iBACNc,GAAI,WACJC,YAAa,eAEdH,EAAOR,gBAAkBS,EAAQT,gBAChC,gBAAKN,UAAWkB,EAAsB,SACnCJ,EAAOR,iBAER,SAGN,mBAAQN,UAAWkB,EAAYC,KAAM,SAAS,qBAGzC,GAIf,EAEA,EA5DA,SAAiBtB,GACf,IAAMuB,EAAiBvB,EAAMwB,YAAYC,YAAYC,KAAI,SAACC,GAAE,OAC1D,SAAC,EAAU,CAACtB,KAAMsB,EAAGtB,KAAMH,GAAIyB,EAAGzB,IAASyB,EAAGzB,GAAM,IAGhD0B,EAAkB5B,EAAMwB,YAAYK,aAAaH,KAAI,SAACC,GAAE,OAC5D,SAAC,EAAO,CAACrB,QAASqB,EAAGrB,QAASJ,GAAIyB,EAAGzB,IAASyB,EAAGzB,GAAM,IAGzD,OACE,iBAAKC,UAAWkB,EAAe,WAC7B,gBAAKlB,UAAWkB,EAAqB,SAAEE,KACvC,iBAAKpB,UAAWkB,EAAgB,WAC9B,yBAAMO,KACN,SAACrB,EAAc,CAACM,YAAab,EAAM8B,kBAI3C,E,UCNA,GAAeC,E,QAAAA,KACbC,EAAAA,EAAAA,KAdoB,SAACC,GACrB,MAAO,CACLT,YAAaS,EAAMT,YAEvB,IACyB,SAACU,GACxB,MAAO,CACLJ,WAAY,SAACrB,GACXyB,EAASC,EAAAA,EAAAA,wBAAgC1B,GAC3C,EAEJ,IAIE2B,EAAAA,EAFF,CAGEC,E,mGChBEC,EAA6B,SAACL,GAChC,MAAO,CACLM,OAAQN,EAAMO,KAAKD,OAEvB,EA4BA,IApBA,SACEE,GAcA,OAAOT,EAAAA,EAAAA,IAEHM,EAA4B,CAAC,EAF1BN,EAXgB,SAAChC,GAEpB,IAAMuC,EAAyBvC,EAAzBuC,OAAWG,GAAS,OAAK1C,EAAK,GAEpC,OAAKuC,GAIE,SAACE,GAAgB,UAAKC,KAHpB,SAAC,KAAQ,CAACzC,GAAI,UAIzB,GAKJ,C","sources":["webpack://react-kbzda-1/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://react-kbzda-1/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","webpack://react-kbzda-1/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogs_items\":\"Dialogs_dialogs_items__JafqC\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message__error\":\"Dialogs_message__error__h7xV7\",\"btn\":\"Dialogs_btn__BVDb-\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__gU34-\",\"active\":\"DialogItem_active__wvgh9\"};","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport classes from \"./DialogItem.module.css\";\n\ntype PropsType = {\n  id: number\n  name: string\n}\n\nconst DialogItem: React.FC<PropsType> = (props) => {\n  return (\n    <NavLink\n      to={`/dialogs/${props.id}`}\n      className={classes.dialog + \" \" + classes.active}\n    >\n      {props.name}\n    </NavLink>\n  );\n};\n\nexport default DialogItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__rjHQQ\"};","import React from \"react\";\nimport classes from \"./Message.module.css\"; \n\ntype PropsType  = {\n  message: string\n}\n\nconst Message: React.FC<PropsType> = (props) => {\n  return <div className={classes.message}>{props.message}</div>;\n};\n\nexport default Message;\n","import React from \"react\";\nimport styles from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport { Formik, Form, Field } from \"formik\";\nimport { textareaFormSchema } from \"../FormValidation/LoginFormSchema\";\n\nfunction Dialogs(props) {\n  const dialogsElement = props.dialogsPage.dialogsData.map((el) => (\n    <DialogItem name={el.name} id={el.id} key={el.id} />\n  ));\n\n  const messagesElement = props.dialogsPage.messagesData.map((el) => (\n    <Message message={el.message} id={el.id} key={el.id} />\n  ));\n\n  return (\n    <div className={styles.dialogs}>\n      <div className={styles.dialogs_items}>{dialogsElement}</div>\n      <div className={styles.messages}>\n        <div>{messagesElement}</div>\n        <AddMassageForm sendMessage={props.messageAdd} />\n      </div>\n    </div>\n  );\n}\n\nconst AddMassageForm = (props) => {\n  let addNewMessage = (values) => {\n    props.sendMessage(values);\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        newMessageBody: \"\",\n      }}\n      onSubmit={(values, { resetForm }) => {\n        addNewMessage(values.newMessageBody);\n        resetForm({ values: \"\" });\n      }}\n      validationSchema={textareaFormSchema}\n    >\n      {({ errors, touched }) => (\n        <Form>\n          <div>\n            <Field\n              name={\"newMessageBody\"}\n              as={\"textarea\"}\n              placeholder={\"enter text\"}\n            />\n            {errors.newMessageBody && touched.newMessageBody ? (\n              <div className={styles.message__error}>\n                {errors.newMessageBody}\n              </div>\n            ) : null}\n          </div>\n\n          <button className={styles.btn} type={\"submit\"}>\n            Send2\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default Dialogs;\n","import { connect } from \"react-redux\";\nimport { actions } from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\nlet mapStateToProps = (state) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  };\n};\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    messageAdd: (newMessageBody) => {\n      dispatch(actions.addMessageActionCreator(newMessageBody));\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n","import React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../redux/redux-store\";\n\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => {\n  return {\n    isAuth: state.auth.isAuth\n  } // as MapPropsType // работает и без этого\n}\n\ntype MapPropsType = { isAuth: boolean }\n\ntype DispatchPropsType = {}\n\n// WCP это - WrappedComponentProps\n\nfunction withAuthRedirect<WCP extends object>(\n  WrappedComponent: React.ComponentType<WCP>) {\n\n  const RedirectComponent: React.FC<MapPropsType &\n    DispatchPropsType> = (props) => {\n\n      let { isAuth, ...restProps } = props\n\n      if (!isAuth) {\n        return <Navigate to={'/login'} />\n      }\n\n      return <WrappedComponent {...restProps as WCP} />\n    }\n\n  return connect<MapPropsType, DispatchPropsType,\n    WCP, AppStateType>(\n      mapStateToPropsForRedirect, {})(RedirectComponent)\n}\n\nexport default withAuthRedirect"],"names":["props","to","id","className","classes","name","message","AddMassageForm","initialValues","newMessageBody","onSubmit","values","resetForm","sendMessage","addNewMessage","validationSchema","textareaFormSchema","errors","touched","as","placeholder","styles","type","dialogsElement","dialogsPage","dialogsData","map","el","messagesElement","messagesData","messageAdd","compose","connect","state","dispatch","actions","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","WrappedComponent","restProps"],"sourceRoot":""}