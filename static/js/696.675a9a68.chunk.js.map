{"version":3,"file":"static/js/696.675a9a68.chunk.js","mappings":"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","sources":["webpack://react-kbzda-1/./src/components/Profile/MyPosts/MyPost.module.css?8a86","webpack://react-kbzda-1/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPost.tsx","components/Profile/MyPosts/MyPostContainer.tsx","webpack://react-kbzda-1/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileData/Contact.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","webpack://react-kbzda-1/./src/components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.css?9ff0","components/FormValidation/ProfileFormSchema.js","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.jsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"posts_block\":\"MyPost_posts_block__pd08z\",\"posts\":\"MyPost_posts__hFu9R\",\"post__error\":\"MyPost_post__error__mIlwQ\",\"btn\":\"MyPost_btn__9xWv0\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import classes from \"./Post.module.css\";\nimport React from \"react\";\n\n\ntype PropsType = {\n  message: string\n  likeCount: number\n}\n\nconst Post: React.FC<PropsType> = (props) => {\n  return (\n    <div className={classes.item}>\n      <img\n        src=\"https://i.ytimg.com/vi/6C9PDnU6QI0/maxresdefault.jpg\"\n        alt=\"avatar\"\n      />\n      {props.message}\n      <div>\n        <span>Like {props.likeCount} </span>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;\n","import styles from \"./MyPost.module.css\";\nimport React from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport { textareaFormSchema } from \"../../FormValidation/LoginFormSchema\";\n\ntype AddNewPostFormPropsType = {\n  sendMessage: (newPostText: string) => void\n}\n\nconst AddPostForm: React.FC<AddNewPostFormPropsType> = (props) => {\n  let addNewPost = (value: string) => {\n    props.sendMessage(value);\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        newMessageBody: \"\",\n      }}\n      onSubmit={(values, { resetForm }) => {\n        addNewPost(values.newMessageBody);\n        resetForm();\n      }}\n      validationSchema={textareaFormSchema}\n    >\n      {({ errors, touched }) => (\n        <Form>\n          <div>\n            <Field\n              name={\"newMessageBody\"}\n              as={\"textarea\"}\n              placeholder={\"enter text\"}\n            />\n            {errors.newMessageBody && touched.newMessageBody ? (\n              <div className={styles.post__error}>{errors.newMessageBody}</div>\n            ) : null}\n          </div>\n\n          <button className={styles.btn} type={\"submit\"}>\n            Send2\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default AddPostForm","import styles from \"./MyPost.module.css\";\nimport React from \"react\";\nimport Post from \"./Post/Post\";\nimport AddPostForm from \"./AddPostForm\";\nimport { PostType } from \"../../../types/types\";\n\n\n\nexport type MapPropsType = {\n  postData: Array<PostType>\n}\nexport type DispatchPropsType = {\n  addPost: (newPostText: string) => void\n}\n\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n  const postElemet = props.postData.map((el) => (\n    <Post\n      message={el.message}\n      // id={el.id}\n      likeCount={el.likeCount}\n      key={el.id}\n    />\n  ));\n\n  return (\n    <div className={styles.posts_block}>\n      <h3>My posts</h3>\n      <AddPostForm sendMessage={props.addPost} />\n      <div className={styles.posts}>{postElemet}</div>\n    </div>\n  );\n}\n\nconst MyPost = React.memo(MyPosts);\n\nexport default MyPost;\n","import { connect } from \"react-redux\";\nimport { actions } from \"../../../redux/profile-reducer\";\nimport { AppStateType } from \"../../../redux/redux-store\";\nimport MyPost, { DispatchPropsType, MapPropsType } from \"./MyPost\";\n\n\n\nlet mapStateToProps = (state: AppStateType) => {\n  return {\n    postData: state.profilePage.postData,\n    newPostText: state.profilePage.newPostText,\n  };\n};\n\n\n\nconst MyPostContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\n  addPost: actions.addPostActionCreator\n})(MyPost);\n\nexport default MyPostContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"description_block\":\"ProfileInfo_description_block__4fNv1\",\"mainPhoto\":\"ProfileInfo_mainPhoto__QU8TO\",\"contact\":\"ProfileInfo_contact__sQB8W\",\"profileInfo\":\"ProfileInfo_profileInfo__QG8TK\",\"profileJob\":\"ProfileInfo_profileJob__nLU0G\"};","import React, { ChangeEvent, useEffect, useState } from \"react\";\n\ntype PropsType = {\n  status: string\n  updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\n  let [editMode, setEditMode] = useState(false);\n  let [status, setStatus] = useState(props.status);\n\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n  };\n\n  const deactivateEditMode = () => {\n    setEditMode(false);\n    props.updateStatus(status);\n  };\n\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setStatus(e.currentTarget.value);\n  };\n\n  return (\n    <div>\n      {!editMode && (\n        <div>\n          <b>Status: </b>\n          <span onClick={activateEditMode}>{props.status || \"------\"}</span>\n        </div>\n      )}\n      {editMode && (\n        <div>\n          <input\n            onChange={onStatusChange}\n            autoFocus={true}\n            onBlur={deactivateEditMode}\n            value={status}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProfileStatusWithHooks;\n","import React from 'react'\nimport styles from \"../ProfileInfo.module.css\";\n\ntype PropsType = {\n  contactTitle: string\n  contactValue: string\n}\n\nconst Contact: React.FC<PropsType> = ({ contactTitle, contactValue }) => {\n  return (\n    <div className={styles.contact}>\n      <i>{contactTitle}: </i>\n      {contactValue}\n    </div>\n  );\n};\n\nexport default Contact","import React from 'react'\nimport { ContactsType, ProfileType } from '../../../../types/types';\nimport styles from \"../ProfileInfo.module.css\";\nimport Contact from './Contact';\n\n\ntype PropsType = {\n  profile: ProfileType\n   isOwner: boolean\n    goToEditMode: () => void\n}\n\n\nconst ProfileData: React.FC<PropsType> = ({ profile, isOwner, goToEditMode }) => {\n  return (\n    <div>\n      {isOwner && (\n        <div>\n          <button onClick={goToEditMode}>Edit</button>\n        </div>\n      )}\n      <div className={styles.profileInfo}>\n        <div className={styles.profileJob}>\n          <b>Full name: </b>\n          {profile.fullName}\n        </div>\n        <div className={styles.profileJob}>\n          <b>Looking for a job: </b> {profile.lookingForAJob ? \"yes\" : \"no\"}\n        </div>\n        {profile.lookingForAJob && (\n          <div className={styles.profileJob}>\n            <b>My professional skills: </b>\n            {profile.lookingForAJobDescription}\n          </div>\n        )}\n        <div>\n          <b>About me:</b>\n          {profile.aboutMe}\n        </div>\n      </div>\n      <div className={styles.profileInfo}>\n        <b>My contacts: </b>\n        {Object.keys(profile.contacts).map((key) => {\n          return (\n            <Contact\n              key={key}\n              contactTitle={key}\n              contactValue={profile.contacts[key as keyof ContactsType]}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileData","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ProfileDataForm_form__bHJUz\"};","import * as Yup from \"yup\";\n\nconst profileFormSchema = Yup.object({\n  fullName: Yup.string().required(\"Name is required\"),\n  lookingForAJobDescription: Yup.string()\n    .required(\"Field is required\")\n    .max(100, \"Exceeded maximum number of characters\"),\n  aboutMe: Yup.string()\n    .required(\"Field is required\")\n    .max(100, \"Exceeded maximum number of characters\"),\n});\n\nexport default profileFormSchema;\n","import React from \"react\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport style from \"./ProfileDataForm.module.css\";\nimport profileFormSchema from \"../../../FormValidation/ProfileFormSchema\";\n\nconst ProfileDataForm = (props) => {\n  const submit = props.onSubmit;\n\n  return (\n    <Formik\n      initialValues={props.profile}\n      onSubmit={submit}\n      validationSchema={profileFormSchema}\n    >\n      {() => (\n        <Form className={style.form}>\n          <div>\n            <button type=\"submit\">Save</button>\n          </div>\n          <div>\n            <label>\n              <b>Full name:</b>\n              <Field\n                as={\"input\"}\n                type=\"text\"\n                name=\"fullName\"\n                placeholder=\"Name\"\n              />\n              <ErrorMessage name=\"fullName\" component=\"div\" />\n            </label>\n            <label>\n              <b>Looking for a job:</b>\n              <Field type=\"checkbox\" name=\"lookingForAJob\" />\n            </label>\n            <label>\n              <b>My professional skills:</b>\n              <Field\n                as={\"textarea\"}\n                name=\"lookingForAJobDescription\"\n                placeholder=\"My professional skills\"\n              />\n              <ErrorMessage name=\"lookingForAJobDescription\" component=\"div\" />\n            </label>\n            <label>\n              <b>About me:</b>\n              <Field as={\"textarea\"} name=\"aboutMe\" placeholder=\"About me\" />\n              <ErrorMessage name=\"aboutMe\" component=\"div\" />\n            </label>\n            <div>\n              <b>Contacts:</b>\n              <ul>\n                {Object.keys(props.profile.contacts).map((key) => {\n                  return (\n                    <li key={key}>\n                      <label>\n                        <b>{key}:</b>\n                        <Field\n                          as={\"input\"}\n                          type=\"text\"\n                          name={\"contacts.\" + key}\n                          placeholder={key}\n                        />\n                      </label>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default ProfileDataForm;\n","import React, { ChangeEvent, useState } from \"react\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport styles from \"./ProfileInfo.module.css\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/images/images.png\";\nimport ProfileData from \"./ProfileData/ProfileData\";\nimport ProfileDataForm from \"./ProfileDataForm/ProfileDataForm\";\nimport { ProfileType } from \"../../../types/types\";\n// const userPhoto = require(\"../../../assets/images/images.png\")\n\n\ntype PropsType = {\n  profile: ProfileType\n  status: string\n  updateStatus: (status: string) => void\n  isOwner: boolean\n  savePhoto: (file: File) => void\n  saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst ProfileInfo: React.FC<PropsType> = ({\n  profile,\n  savePhoto,\n  isOwner,\n  status,\n  updateStatus,\n  saveProfile,\n}) => {\n  let [editMode, setEditMode] = useState(false);\n\n  if (!profile) {\n    return <Preloader />;\n  }\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files?.length) {\n      savePhoto(e.target.files[0]);\n    }\n  };\n\n  const onSubmit = (formData: ProfileType) => {\n    saveProfile(formData)\n      .then(() => {\n        setEditMode(false);\n      })\n      .catch(() => {\n        alert(\"Invalid url format\");\n      });\n  };\n\n  return (\n    <div>\n      <div>\n        <img\n          src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR4YWwJaZ79oIELX6C7q_QtBT3Doab4yGxcvQ&usqp=CAU\"\n          alt=\"hz\"\n        />\n      </div>\n      <div className={styles.description_block}>\n        <div className={styles.profileInfo}>\n          <img\n            src={profile.photos.small || userPhoto}\n            alt=\"avatar\"\n            className={styles.mainPhoto}\n          />\n          {isOwner && (\n            <input type=\"file\" onChange={onMainPhotoSelected}></input>\n          )}\n          <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n        </div>\n        {editMode ? (\n          <ProfileDataForm profile={profile} onSubmit={onSubmit} />\n        ) : (\n          <ProfileData\n            profile={profile}\n            isOwner={isOwner}\n            goToEditMode={() => {\n              setEditMode(true);\n            }}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","import React from \"react\";\nimport { ProfileType } from \"../../types/types\";\nimport MyPostContainer from \"./MyPosts/MyPostContainer\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\ntype PropsType = {\n  profile: ProfileType\n  status: string\n  updateStatus: (status: string) => void\n  isOwner: boolean\n  savePhoto: (file: File) => void\n  saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst Profile: React.FC<PropsType> = (props) => {\n  return (\n    <div>\n      <ProfileInfo\n        profile={props.profile}\n        status={props.status}\n        updateStatus={props.updateStatus}\n        isOwner={props.isOwner}\n        savePhoto={props.savePhoto}\n        saveProfile={props.saveProfile}\n      />\n\n      <MyPostContainer />\n    </div>\n  );\n}\n\nexport default Profile;\n","import React, { Component } from \"react\";\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport {\n  getUserProfile,\n  getStatus,\n  updateStatus,\n  savePhoto,\n  saveProfile,\n} from \"../../redux/profile-reducer\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\nclass ProfileContainer extends Component {\n  refreshProfile() {\n    let userId = this.props.router.params.userId;\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n      if (!userId) {\n        this.props.history.push(\"/login\");\n      }\n    }\n    this.props.getUserProfile(userId);\n    this.props.getStatus(userId);\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.router.params.userId !== prevProps.router.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    return (\n      <Profile\n        {...this.props}\n        isOwner={!this.props.router.params.userId}\n        profile={this.props.profile}\n        status={this.props.status}\n        updateStatus={this.props.updateStatus}\n        savePhoto={this.props.savePhoto}\n      />\n    );\n  }\n}\n\nlet mapStateToProps = (state) => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  isAuth: state.auth.isAuth,\n  authorizedUserId: state.auth.userId,\n});\n\nfunction withRouter(Component) {\n  function ComponentWithRouterProp(props) {\n    let location = useLocation();\n    let navigate = useNavigate();\n    let params = useParams();\n    return <Component {...props} router={{ location, navigate, params }} />;\n  }\n\n  return ComponentWithRouterProp;\n}\n\nexport default compose(\n  connect(mapStateToProps, {\n    getUserProfile,\n    getStatus,\n    updateStatus,\n    savePhoto,\n    saveProfile,\n  }),\n  withRouter,\n  withAuthRedirect\n)(ProfileContainer);\n","import React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../redux/redux-store\";\n\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => {\n  return {\n    isAuth: state.auth.isAuth\n  } // as MapPropsType // работает и без этого\n}\n\ntype MapPropsType = { isAuth: boolean }\n\ntype DispatchPropsType = {}\n\n// WCP это - WrappedComponentProps\n\nfunction withAuthRedirect<WCP extends object>(\n  WrappedComponent: React.ComponentType<WCP>) {\n\n  const RedirectComponent: React.FC<MapPropsType &\n    DispatchPropsType> = (props) => {\n\n      let { isAuth, ...restProps } = props\n\n      if (!isAuth) {\n        return <Navigate to={'/login'} />\n      }\n\n      return <WrappedComponent {...restProps as WCP} />\n    }\n\n  return connect<MapPropsType, DispatchPropsType,\n    WCP, AppStateType>(\n      mapStateToPropsForRedirect, {})(RedirectComponent)\n}\n\nexport default withAuthRedirect"],"names":["props","className","classes","src","alt","message","likeCount","initialValues","newMessageBody","onSubmit","values","value","resetForm","sendMessage","validationSchema","textareaFormSchema","errors","touched","name","as","placeholder","styles","type","MyPosts","postElemet","postData","map","el","id","addPost","React","connect","state","profilePage","newPostText","actions","MyPost","useState","editMode","setEditMode","status","setStatus","useEffect","onClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","contactTitle","contactValue","profile","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","key","Yup","required","max","submit","profileFormSchema","style","component","savePhoto","saveProfile","Preloader","photos","small","userPhoto","target","files","length","formData","then","catch","alert","ProfileContainer","userId","this","router","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","isAuth","auth","location","useLocation","navigate","useNavigate","useParams","withAuthRedirect","mapStateToPropsForRedirect","WrappedComponent","restProps","to"],"sourceRoot":""}